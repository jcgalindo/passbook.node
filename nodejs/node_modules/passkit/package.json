{
  "name": "passkit",
  "version": "0.8.1",
  "author": {
    "name": "Sergej Jakovljev",
    "email": "sergej.jakovljev@gmail.com"
  },
  "description": "Passbook passes with PassKit (http://www.passkit.com) API made easy",
  "scripts": {
    "compile": "coffee -o ./lib -c src/",
    "test": "coffee -o ./lib -c src/ && mocha ./tests --compilers coffee:coffee-script --timeout 15s --reporter spec --require ./test_helper.js"
  },
  "main": "./lib/passkit",
  "repository": {
    "type": "git",
    "url": "http://github.com/srolija/node-passkit.git"
  },
  "keywords": [
    "pass",
    "passbook",
    "passkit",
    "ticket"
  ],
  "dependencies": {
    "mime": "1.2.9"
  },
  "devDependencies": {
    "chai": "1.2.x",
    "coffee-script": "1.4.x",
    "mocha": "*",
    "nock": "0.14.x",
    "sinon": "1.5.x"
  },
  "license": "MIT",
  "engines": {
    "node": ">=0.6"
  },
  "readme": "# Node-PassKit\n\nThis package makes using PassKit API simple by removing overhead of authenticating using Digest authentication and by implementing all of the available API endpoints as simple functions.\n\n## Installation\n\nCompatible with Node >= 0.6.x, tested on Node 0.6.10 and 0.8.7.\nTo install simply run following command:\n\n```\n$ npm install passkit\n```\n\n## Example\n\nLets start with requiring PassKit package, we need to provide `API_USER` and `API_SECRET` that were mailed to us after registration.\n\n```javascript\nvar passkit = require('passkit')(\"[API_USER]\", \"[API_SECRET]\")\n```\n\nThen given we have created template named `test` in PassKit pass Designer and it has field `owner` we can issue new pass with custom owner name like this:\n\n\n```javascript\npasskit.issuePass('test', {owner: 'Me'}, function(err, data){\n  console.log('issuePass:');\n  if (err) {\n    console.error(err);\n  } else {\n    console.log(data);\n  }\n});\n```\n\nAfter about second we should see something like this:\n\n```\n{ \n  serial: '100000000001',\n  url: 'https://r.pass.is/sOmErAnDoM',\n  passbookSerial: 'SoMeRaNdOmLoNgHeX' \n}\n```\n\nFor more information, tips and API reference please look at [annotated source code](http://srolija.github.com/node-passkit).\n\n\n## Tests\n\nIf you plan on using this package on newer or older version of Node it is highly recommended that you run tests to verify that everything is working as expected.\n\nYou can run tests simply by going to package directory installing dependencies and running:\n\n```\nnpm test\n```\n\nIf you want to run tests as integration tests (to verify if some of API endpoints maybe changed and would cause different response) enter your API info in `test_helper.js`, then create new template in your account on PassKit called `test` and create single dynamic field named `owner`. \n\nThen in `test_helper.js` set following:\n\n```\nglobal.SERVER = true\nglobal.TOTAL = true\n```\n\nAnd run tests normally. Keep in mind that API changes and possible errors on connection or internal Server Errors could fail those tests! Also each time before you run integration tests go to `test` template in PassKit Pass Deisgner and save template, doing this prevents error when trying to reset template.\n\nKeep in mind that integration tests **do not cover entire API** just most important parts of it, other tests do cover entire API that is implemented!\n\n\n## Versions\n\n### 0.8.1\nDate 3/29/2013\n\nFixed Content-Length problem. \nRecompiled with latest coffee-script.\n\n### 0.8.0\nDate: 1/31/2013\n\nInitial public release.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/srolija/node-passkit/issues"
  },
  "homepage": "https://github.com/srolija/node-passkit",
  "_id": "passkit@0.8.1",
  "_from": "passkit@"
}
